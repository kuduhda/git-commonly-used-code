$git init命令把这个目录变成Git可以管理的仓库
$git add把文件添加到仓库
$git commit把文件提交到仓库.-m  "  "输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录
$git log可以告诉我们历史记录,看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git status查看状态
$git rm要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$git diff比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令。
请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。
$git switch 分支   切换分支
$git switch -c  分支     新建+切换分支
$git branch查看分支
$git branch 名字   创建分支
$ git restore --worktree 文件名  如果暂存区有该文件的修改，恢复到和暂存区一致；如果暂存区没有该文件，会将工作区的文件恢复到和最近的提交的一致。
$ git restore --staged 撤销暂存区某些文件的修改，将这些文件恢复到工作区去
$git restore --source=HEAD~1 . 将工作区内容切换到上个 commit 版本
$git restore --source=<commit> .
$ git remote add origin  URL把本地仓库的关联到线上GitHub仓库
$ git push origin master把本地master分支的最新修改推送至GitHub
$git remote -v查看远程库信息
$git remote rm 远程库名字    解除远程库和本地库的关系
$git clone URL 克隆一个远程库
$git merge 分支    命令用于合并指定分支到当前分支。
$git branch -d 名字    删除分支
分支修改后没有提交是无法切换到另一分支的
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交
$ git instaweb以网站方式查看本地仓库,使用 Git 的 instaweb 可以立即在 gitweb 中浏览你的工作仓库。这个命令是个简单的脚本，配置了 gitweb 和用来浏览本地仓库的Web服务器。（译者注：默认需要lighttpd支持）
$ git merge --no-ff 请注意--no-ff参数，表示禁用Fast forward,这样，从分支历史上就可以看出分支信息
$git branch -D 名字  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
$ git tag 名字 给当前分支最新提交起名字
$ git tag 标签 某次提交版本号   给某次提交起名字，还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag 查看标签
$git show 标签名字   可以看到说明文字
注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。
$git push origin 某标签名   推送某个标签
$git push origin --tags  一次推送很多表情
$ git tag -d 标签名字  如果标签打错了，也可以删除
$git push origin :refs/tags/标签名    可以删除一个远程标签
$git branch -m master main 更改分支名master为main
$git push origin master 把本地master分支的修改提交到远程仓库
$git pull --rebase origin master 把远程仓库的修改同步到本地仓库
